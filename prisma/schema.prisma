// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  hr
  user
}

enum JobType {
  FullTime
  PartTime
  Contract
  Internship
}

enum CandidateStatus {
  Applied
  Reviewed
  Interviewing
  Offered
  Hired
  Rejected
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  role      Role     @default(user)
  companyId String?  @db.ObjectId
  company   Company? @relation("CompanyHR", fields: [companyId], references: [id])

  applications Kandidat[]
  enrollments  Enrollment[]
  certificates Certificate[]
  threads      ForumThread[]
  posts        ForumPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  slug      String   @unique
  thumbnail String?
  courses   Kursus[]
}

model Kursus {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  instructor  String

  thumbnail   String?
  lessonCount Int
  rating      Float
  duration    Int

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  topics       Topic[]
  enrollments  Enrollment[]
  certificates Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  content  String
  videoUrl String?

  kursusId String @db.ObjectId
  kursus   Kursus @relation(fields: [kursusId], references: [id], onDelete: Cascade)

  quiz      Quiz?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  topicId String @unique @db.ObjectId
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  questions Question[]
}

model Question {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  quizId String @db.ObjectId
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  answers Answer[]
}

model Answer {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  isCorrect Boolean

  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  kursusId String @db.ObjectId
  kursus   Kursus @relation(fields: [kursusId], references: [id], onDelete: Cascade)

  enrolledAt DateTime @default(now())
  progress   Float    @default(0)

  @@unique([userId, kursusId])
}

model Certificate {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  kursusId String @db.ObjectId
  kursus   Kursus @relation(fields: [kursusId], references: [id])

  issuedAt DateTime @default(now())

  @@unique([userId, kursusId])
}

model ForumThread {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  posts     ForumPost[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ForumPost {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  threadId String      @db.ObjectId
  thread   ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Community {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String  @unique
  description   String
  coverImageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String
  website     String?
  location    String
  logoUrl     String?
  hrUsers     User[]     @relation("CompanyHR")
  jobPostings Lowongan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lowongan {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  location    String
  jobType     JobType
  salaryRange String?

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  candidates Kandidat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Kandidat {
  id     String          @id @default(auto()) @map("_id") @db.ObjectId
  status CandidateStatus @default(Applied)
  userId String          @db.ObjectId
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId  String          @db.ObjectId
  job    Lowongan        @relation(fields: [jobId], references: [id])

  resumeUrl String
  appliedAt DateTime @default(now())

  @@unique([userId, jobId])
}
